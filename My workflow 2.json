{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "path": "b920e0c1-e311-4082-be83-e937327a9f14",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -144,
        -96
      ],
      "id": "fc7c991f-0319-48a1-9a69-7cd3753f6fc8",
      "name": "Webhook",
      "webhookId": "b920e0c1-e311-4082-be83-e937327a9f14"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst updatedItems = items.map((item) => {\n  const url = item.json.query.repo_url;\n\n  const match = url.match(/github\\.com\\/([^\\/]+)\\/([^\\/]+)(?:\\/tree\\/([^\\/]+))?/);\n\n  if (!match) {\n    throw new Error(\"Invalid GitHub URL\");\n  }\n\n  const owner = match[1];\n  const repo = match[2].replace(/\\.git$/, \"\");\n  const branch = match[3] || \"main\"; // If branch is not specified, default to main\n\n  return {\n    json: {\n      owner,\n      repo,\n      branch,\n    },\n  };\n});\n\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        -96
      ],
      "id": "f48f44b3-7cf3-42d8-add7-ec22ca90af9a",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{ $json.owner }}/{{ $json.repo }}/git/trees/{{ $json.branch }}?recursive=1",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        304,
        -96
      ],
      "id": "4cb52466-731b-44b8-8576-7a102cdb1eb4",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "HCAHZ173MNumgKwR",
          "name": "Header Auth account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return items.filter(item => {\n  const privatePatterns = [\n    /^\\.gitignore$/,\n    /^\\.env$/,\n    /^\\.github\\//,\n    // Add more patterns as needed\n  ];\n  return !privatePatterns.some(pattern => pattern.test(item.json.path));\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        528,
        -96
      ],
      "id": "77e62ba0-d253-439c-9db5-169abbffe94e",
      "name": "Code1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "tree",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        752,
        -96
      ],
      "id": "4f034dbc-478b-4053-944f-6d0f7c03a8f9",
      "name": "Split Out"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "40bb3bf7-5aeb-4ad5-90f8-01950b6dc9aa",
              "leftValue": "={{ $json.type }}",
              "rightValue": "blob",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        976,
        -96
      ],
      "id": "35892163-8272-46ed-ade1-d26cc10ea841",
      "name": "If"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/vnd.github.v3.raw"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1200,
        -96
      ],
      "id": "ee05b204-93dc-4879-a39c-58efb544576d",
      "name": "HTTP Request1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "HCAHZ173MNumgKwR",
          "name": "Header Auth account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the following project files and generate a comprehensive, beautiful and appealing README.md file. Here are the contents:\n    {{ $json.data }}\n\ngenerate the full markdown code so that the user can easily copy and paste it in the README.md file. the output format is an object which contains the output. give the full code of markdown ",
        "needsFallback": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1424,
        -96
      ],
      "id": "72e6f012-828d-4b93-91bb-147f0d36ee99",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "llama3-70b-8192",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1424,
        128
      ],
      "id": "a7830f52-d089-42b5-8514-175d616f5ef8",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "BBeq3zXmv3ZP1gY5",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      output: $input.first().json.output\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1888,
        -96
      ],
      "id": "2323a448-1857-4f63-bbfa-8a398b31dab9",
      "name": "Code2"
    },
    {
      "parameters": {
        "model": "llama3-70b-8192",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1552,
        128
      ],
      "id": "677deaaa-e186-4b13-96f7-342a0821f5c1",
      "name": "Groq Chat Model1",
      "credentials": {
        "groqApi": {
          "id": "BBeq3zXmv3ZP1gY5",
          "name": "Groq account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "78c8e691-00cb-436f-b0df-83edcf46ec0d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e9651222fe975e8fad28b35b7f5339a4cf438d03495a342b9876f6ba320ac892"
  },
  "id": "xYe1mmoeOEj21Eyb",
  "tags": []
}